---
title: "Unix Shell refresher"
pagetitle: "Unix shell"
author: Jelmer Poelstra
date: 2024-02-07
execute: 
  eval: false
knitr:
  opts_chunk:
    out.width: "85%"
    class-output: bash-out
editor_options: 
  chunk_output_type: console
---

<br>

## Overview & setting up

Many of the things you typically do by pointing and clicking can alternatively
be done by typing commands.
The Unix shell allows you to interact with computers via commands.

Working effectively on a remote supercomputer tends to simply _require_ using a
command line interface.
But there are more **advantages to doing command line computing**
than just allowing you to work on a supercomputer, such as:

  - Working efficiently with large files
  - Achieving better reproducibility in research
  - Performing general computing tasks more efficiently (once you get the hang of it...)
  - Making it easier to repeat similar tasks across files, samples, and projects
  - For bioinformatics, being able to use (the latest) command-line programs directly
    without having to depend on "GUI wrappers" written by third parties,
    that often cost money and also lag behind in functionality

#### Starting a VS Code session in OSC OnDemand

**We'll use a Unix shell at OSC inside VS Code**.
You should have an active VS Code session in the folder `/fs/scratch/PAS2250/cabana/<user>`,
and with an open Terminal &mdash; if not, see the instructions in the dropdown
box right below.

:::{.callout-tip collapse="true"}
## Starting VS Code at OSC - with a Terminal _(Click to expand)_
1. Log in to OSC's OnDemand portal at <https://ondemand.osc.edu>.
2. In the blue top bar, select `Interactive Apps`
   and then near the bottom of the dropdown menu, click `Code Server`.
3. In the form that appears on a new page:
   - Select OSC project `PAS2250`
   - The starting directory: `/fs/scratch/PAS2250/cabana/<user>`
   - `Number of hours`: `10`
   - Click `Launch`.
4. On the next page, once the top bar of the box has turned green
   and says `Runnning`, click `Connect to VS Code`.
5. Open a Terminal by clicking
   &nbsp; {{< fa bars >}} &nbsp; => `Terminal` => `New Terminal`.
   (Or use one of the keyboard shortcuts:
   <kbd>Ctrl</kbd>+<kbd>\`</kbd> (backtick) or
   <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>C</kbd>.)
6. Type `pwd` to check where you are.
   If you are not in `/fs/scratch/PAS2250/cabana/<user>`,
   click `Open folder...` in the `Welcome` tab,
   or &nbsp; {{< fa bars >}} &nbsp; => &nbsp; `File` &nbsp; => &nbsp; `Open Folder`,
   then type/select `/fs/scratch/PAS2250/cabana/<user>` and press Ok.
:::

::: {.callout-note}
#### Some Unix shell terminology

We're going to focus on the practice of doing command line computing here,
and not get too bogged down in terminology,
but let's highlight a few interrelated terms you're likely to run across:

  - **Command Line** &mdash; the most general term, an interface where you type commands
  - **Terminal** &mdash; the program/app/window that can run a Unix shell 
  - **Shell** &mdash; a command line interface to your computer
  - **Unix Shell** &mdash; the types of shells on Unix family (Linux + Mac) computers 
  - **Bash** &mdash; the specific Unix shell language that is most common on Unix computers
  
While it might not fly for a computer science class,
for day-to-day computing/bioinformatics,
you'll probably hear all these terms used somewhat interchangeably.

:::

<br>

## Recap of the basics

### The prompt

Inside your terminal, the "prompt" indicates that the shell is ready for a command.
What is shown exactly varies a bit across shells and can also be customized,
but our prompts at OSC should show the following:

``` {.bash-in-nocolor}
[<username>@<node-name> <working-dir>]$
```

For example:

``` {.bash-in-nocolor}
[jelmer@p0080 jelmer]$ 
```

We type our commands after the dollar sign,
and then press <kbd>Enter</kbd> to execute the command.
When the command has finished executing,
we'll get our prompt back and can type a new command.

::: callout-tip
#### How shell code is shown on this website

-   The gray boxes like the ones shown above will be used to show the command line expressions that you should type.

-   In upcoming boxes, the prompt itself (`[...]$`) will not be shown, but only the command line expressions that you type. This is to save space and to allow you for copy-and-pasting (but I recommend typing!).

-   Paler gray boxes (below the boxes with command have & with italic text) show the *output* of commands.
:::

<br>

### A few simple commands: `date`, `whoami`, `pwd`

The Unix shell comes with hundreds of "commands": small programs that perform specific actions. If you're familiar with R or Python, a Unix command is like an R/Python function.

Let's start with a few simple commands:

-   The `date` command prints the current date and time:

``` bash
date
```

``` bash-out
Fri Jan 26 14:31:51 EST 2024
```

-   The `whoami` (who-am-i) command prints your username:

``` bash
whoami
```

``` bash-out
jelmer
```

-   The `pwd` (Print Working Directory) command prints the path to the directory you are currently located in:

``` bash
pwd
```

``` bash-out
/fs/scratch/PAS2250/cabana/jelmer
```

All 3 of those commands provided us with some output. That output was **printed to screen**, which is the default behavior for nearly every Unix command.

::: callout-note
#### Working directory and paths

-   When working in a Unix shell, you are always "in" a specific directory and this is called your **working directory**.
-   In a **path** (= location of a file or directory) such as that output by `pwd`, directories are separated by forward slashes **`/`**. (And a *leading* forward slash, if present, indicates the computer's *root directory*.)
:::

::: callout-tip
#### General shell tips

-   Everything in the shell is **case-sensitive**, including commands and file names.
-   **Avoid spaces** in file and directory names! Use e.g. underscores or capitalization to distinguish words.
:::

<br>

### `cd` and command actions & arguments

In the above three command line expressions:

-   We merely typed a command and nothing else
-   The command provided some information, which was printed to screen

But many commands perform an **action** other than providing information. For example, you can use the command **`cd`** to Change Directory (i.e. change your *working* dir). And like many commands that perform an action, `cd` normally has **no output** at all.

Let's use `cd` to move to another directory by specifying the *path* to that directory after the `cd` command:

``` bash
cd /fs/scratch/PAS2250/cabana/share
```

``` bash
pwd
```

``` bash-out
/fs/scratch/PAS2250/cabana/share
```

::: callout-note
#### I will demonstrate "tab completion"!
:::

In more abstract terms, what we did above was to provide `cd` with an **argument**, namely the path of the dir to move to. Arguments generally tell commands what file or directory to operate on.

As we've seen, then, `cd` gives no output when it succesfully changed the working directory. But let's also see what happens when it does not succeed — it gives an error:

``` bash
cd /fs/Scratch/PAS2250
```

``` bash-out
bash: cd: /fs/Scratch/PAS2250: No such file or directory
```

<details>

<summary>**Your Turn**: What was the problem with the path we specified? *(Click to see the answer)*</summary>

We used a capital S in `/Scratch/` — this should have been `/scratch/`.

As pointed out above, paths (dir and file specifications) are **case-sensitive** on Unix systems!

</details>

<hr style="height:1pt; visibility:hidden;" />

### `ls` and command *options*

#### The default behavior of `ls`

The `ls` command, short for "list", will list files and directories:

``` bash
ls
```

``` bash-out
data  README.md
```

*(You should still be in `/fs/scratch/PAS2250/cabana/share`. If not, `cd` there first.)*

::: {.callout-tip collapse="true"}
#### Side note: `ls` output colors *(click to expand)*

Unfortunately, the `ls` output shown above does not show the different colors you should see in your shell — here are some of the most common ones:

-   Entries in [blue]{style="color: #0328fc"} are directories (like `data` and `metadata` above)
-   Entries in black are regular files (like `README.md` above)
-   Entries in [red]{style="color: #d92118"} are compressed files (we'll see an example soon).
:::

This default way that `ls` shows the output can be changed by providing `ls` with **options**.

#### Options (to `ls`)

In general, whereas arguments tell a command *what to operate on*, options will *modify its behavior*. For example, we can call `ls` with the **option `-l`** (a dash followed by a lowercase L):

``` bash
ls -l 
```

``` bash-out
total 17
drwxr-xr-x 5 jelmer PAS0471 4096 Jan 21 12:39 data
-rw-r--r-- 1 jelmer PAS0471 1502 Jan 22 11:04 README.md
```

Notice that it lists the same items as our first `ls` call above, but **printed in a different format**: one item per line, with additional information included, such as the date and time each file was last modified, and the file sizes in bytes (to the left of the date).

Let's add another option, `-h`:

``` bash
ls -l -h
```

``` bash-out
total 17K
drwxr-xr-x 5 jelmer PAS0471 4.0K Jan 21 12:39 data
-rw-r--r-- 1 jelmer PAS0471 1.5K Jan 22 11:04 README.md
```

<details>

<summary>**Your Turn**: What is different about the output, and what do you think that means? *(Click to see the answer)*</summary>

The only difference is in the format of the column reporting the sizes of the items listed.

We now have "Human-readable filesizes" (hence `-h`), where sizes on the scale of kilobytes will be shown with `K`s, of megabytes with `M`s, and of gigabytes with `G`s. That can be really useful especially for very large files.

</details>

Conveniently, options can be pasted together as follows:

``` bash
ls -lh
```

#### Combining options and arguments

Arguments to `ls` should be **dirs or files to operate on**. For example, if we wanted to see what's inside the `data` dir, instead of inside our working dir, we could type:

``` bash
ls data
```

``` bash-out
fastq  meta  ref
```

The `data` dir appears to contain three (sub)dirs with different kinds of data. We'll talk in detail about that later, but for now let's look inside the `fastq` dir:

``` bash
ls data/fastq
```

``` bash-out
ERR10802863_R1.fastq.gz  ERR10802865_R2.fastq.gz  ERR10802868_R1.fastq.gz  ERR10802870_R2.fastq.gz  ERR10802875_R1.fastq.gz  ERR10802877_R2.fastq.gz  ERR10802880_R1.fastq.gz  ERR10802882_R2.fastq.gz  ERR10802885_R1.fastq.gz
ERR10802863_R2.fastq.gz  ERR10802866_R1.fastq.gz  ERR10802868_R2.fastq.gz  ERR10802871_R1.fastq.gz  ERR10802875_R2.fastq.gz  ERR10802878_R1.fastq.gz  ERR10802880_R2.fastq.gz  ERR10802883_R1.fastq.gz  ERR10802885_R2.fastq.gz
ERR10802864_R1.fastq.gz  ERR10802866_R2.fastq.gz  ERR10802869_R1.fastq.gz  ERR10802871_R2.fastq.gz  ERR10802876_R1.fastq.gz  ERR10802878_R2.fastq.gz  ERR10802881_R1.fastq.gz  ERR10802883_R2.fastq.gz  ERR10802886_R1.fastq.gz
ERR10802864_R2.fastq.gz  ERR10802867_R1.fastq.gz  ERR10802869_R2.fastq.gz  ERR10802874_R1.fastq.gz  ERR10802876_R2.fastq.gz  ERR10802879_R1.fastq.gz  ERR10802881_R2.fastq.gz  ERR10802884_R1.fastq.gz  ERR10802886_R2.fastq.gz
ERR10802865_R1.fastq.gz  ERR10802867_R2.fastq.gz  ERR10802870_R1.fastq.gz  ERR10802874_R2.fastq.gz  ERR10802877_R1.fastq.gz  ERR10802879_R2.fastq.gz  ERR10802882_R1.fastq.gz  ERR10802884_R2.fastq.gz
```

Ah, FASTQ files! These contain our sequence data, and we'll go and explore them in a bit.

Finally, we can **combine options and arguments**, and let's do so take a closer look at our dir with FASTQ files — now the `-h` option is especially useful and allows us see that the FASTQ files are 21-22 Mb in size:

``` bash
ls -lh data/fastq
```

``` bash-out
total 941M
-rw-r--r-- 1 jelmer PAS0471 21M Jan 21 13:34 ERR10802863_R1.fastq.gz
-rw-r--r-- 1 jelmer PAS0471 22M Jan 21 13:34 ERR10802863_R2.fastq.gz
-rw-r--r-- 1 jelmer PAS0471 21M Jan 21 13:34 ERR10802864_R1.fastq.gz
-rw-r--r-- 1 jelmer PAS0471 22M Jan 21 13:34 ERR10802864_R2.fastq.gz
-rw-r--r-- 1 jelmer PAS0471 22M Jan 21 13:34 ERR10802865_R1.fastq.gz
-rw-r--r-- 1 jelmer PAS0471 22M Jan 21 13:34 ERR10802865_R2.fastq.gz
-rw-r--r-- 1 jelmer PAS0471 21M Jan 21 13:34 ERR10802866_R1.fastq.gz
-rw-r--r-- 1 jelmer PAS0471 22M Jan 21 13:34 ERR10802866_R2.fastq.gz
[...output truncated...]
```

<details>

<summary>{{< fa user-edit >}} **Your Turn**: List the files in the `data/ref` dir. What are the file sizes? *(Click for the solution)*</summary>

``` bash
ls -lh data/ref
```

``` bash-out
total 670M
-rw-r--r-- 1 jelmer PAS0471 547M Jan 20 22:34 GCF_016801865.2.fna
-rw-r--r-- 1 jelmer PAS0471 123M Jan 20 22:34 GCF_016801865.2.gtf
```

The `.fna` file (this is the genome assembly nucleotide FASTA file) is 547 Mb (not bases but bytes!), and the `.gtf` file (this is the annotation file) is 123 Mb.

</details>

<hr style="height:1pt; visibility:hidden;" />

### A few more general shell tips

-   **Command history:** If you hit the <kbd>⇧</kbd> (up arrow) once, you'll retrieve your most recent command, and if you keep hitting it, you'll go further back. The<kbd>⇩</kbd> (down arrow) will go the other way: towards the present.

-   Your cursor can be anywhere on a line (not just at the end) when you press <kbd>Enter</kbd> to execute a command!

-   If your **prompt is missing**, the shell is either still busy executing your command, or you typed an incomplete command. To abort in either of these two scenarios, press <kbd>Ctrl</kbd>+<kbd>C</kbd> and you'll get your prompt back.

-   Anything that comes after a `#` is considered a comment instead of code!

``` bash
# This entire line is a comment - you can run it and nothing will happen
pwd    # 'pwd' will be executed but everything after the '#' is ignored
```

``` bash-out
/fs/scratch/PAS2250/cabana/jelmer
```

<hr style="height:1pt; visibility:hidden;" />

<details>

<summary>{{< fa user-edit >}} **Your Turn**: Move into your personal directory, and then back into the `share` dir *(Click for the solution)*</summary>

``` bash
cd /fs/scratch/PAS2250/cabana/jelmer
cd /fs/scratch/PAS2250/cabana/share
```

</details>

<details>

<summary>{{< fa user-edit >}} **Your Turn**: Use the command history (arrows) to repeat the previous exercise without typing anything.</summary>

</details>

<hr style="height:1pt; visibility:hidden;" />

<details>

<summary>{{< fa user-edit >}} **Your Turn (Bonus)**: Two periods `..` means the directory "one level up" (towards the computer's root dir): running `cd ..` will move you one dir level up. Try to make use of this move into your personal dir and back to `share` again, instead of using the "full paths" like above. *(Click for the solution)*</summary>

``` bash
cd ../jelmer
cd ../share
```

A little more detail about this, for those that are interested:

-   Paths that start with a `/`, i.e. paths that start from the computer's root directory, are called "absolute" or "full paths" (you can think of them as GPS coordinates, they work regardless of where you are located).

-   Paths that do not start with `/` (are always supposed to) start from your current working directory and are called "relative paths". We've used them above with `ls data` and `ls data/fastq`. The `..`, then, is a mechanism to go "up" in the dir hierarchy when using a relative path! They work more like directions along the lines of "take the second left" in the sense that they depend on your current location.

</details>

<details>

<summary>{{< fa user-edit >}} **Your Turn (Bonus)**: Practice aborting commands (*Click for the instructions*)</summary>

To simulate a long-running command that we may want to abort, we can use the `sleep` command, which will make the computer wait for a specified amount of time until giving your prompt back:

``` bash
sleep 60s
```

Run that command and instead of waiting for the full 60 seconds, press <kbd>Ctrl</kbd> + <kbd>C</kbd> to get your prompt back sooner!

Or, an example of an incomplete command (an opening parenthesis `(`):

``` bash
(
```

Run the code above, see what happens, and press <kbd>Ctrl</kbd> + <kbd>C</kbd> to get your prompt back.

</details>

<br>

### Paths

"Paths" specify the locations of files or dirs on a computer,
and there are two distinct ways of specifying them:

- **Absolute (full) paths**\
  These always start from the root directory of the computer,
  which is represented by a _**leading `/`**_, such as in `/fs/scratch/PAS2250/`^[
  Absolute paths are like GPS coordinates to specify a geographic location on earth: they will provide location information regardless of where we are ourselves.].

- **Relative paths**\
  These start from your current working directory.
  When we typed `ls data` earlier,
  we indicated that we wanted to show the contents of the
  `data` directory located inside our current working directory^[Relative paths are more like directions to a location that say things like "turn left" &mdash; these instructions depend on our current location.].

There are a couple of "shortcuts" available for relative paths:

- **`.`** (a single period)\
  This is another way of representing the current working directory.
  Therefore, for instance, `ls ./data` is functionally the same as `ls data`.

- **`..`** (two periods)\
  This means one level up in the directory hierarchy, with "up" meaning towards the root directory.

```bash
ls ..               # One level up, listing /fs/ess/PAS0471/demo
```
```{.bash-out}
202307_rnaseq
```

This pattern can be continued all the way to the root of the computer,
so `../..` would list files two levels up:

```bash
ls ../..            # Two levels up, listing /fs/ess/PAS0471
```
```{.bash-out}
aarevalo       conroy      frederico       Nisha     osu8947              ross
acl            containers  hsiangyin       osu10028  osu9207              Saranga
Almond_Genome  danraywill  jelmer          osu10436  osu9207_Lubell_bkup  Shonna
amine1         data        jelmer_osu5685  osu5685   osu9390              SLocke
ap_soumya      demo        jlhartman       osu6702   osu9453              sochina
audreyduff     dhanashree  linda           osu8107   osu9657
bahodge11      edwin       Maggie          osu8468   pipeline
calconey       ferdinand   mcic-scripts    osu8548   poonam
camila         Fiama       Menuka          osu8618   raees
Cecilia        Flye        nghi            osu8900   rawalranjana44
```

::: {.callout-tip}
#### These shortcuts work with all commands
All of the above shortcuts are *general shell shortcuts* that work with **any**
command that takes a path.

Also: **`~`** represents your Home directory,
so `cd ~` would move there and `ls ~` would list the files there.
:::

::: {.callout-note}
#### Many bioinformatics programs are basically specialized commands
In many ways, you can think of using a command-line bioinformatics program as using just another command.
Therefore, our general skills with Unix commands will very much extend to using
command-line bioinformatics tools!
:::

<br>
