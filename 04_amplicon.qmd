---
title: "Amplicon sequencing for *Phytophthora infestans* populations"
subtitle: "Análisis de poblaciones de *Phytophthora infestans*"
author: "Myriam Izarra"
date: 2024-02-07
number-depth: 4
execute: 
  eval: false
editor_options: 
  chunk_output_type: console
lang: es-ES
---

<br>

## *Data Secuenciada*

Listado de muestras (n=55) a analizar por alumno.

![](img_myriam/List%20of%20samples2.png){width="100%"}

## *Servidor*

![](img_myriam/logo2.png){fig-align="center" width="25%"}

*Ingresar* [SupercomputerCenter](https://ondemand.osc.edu/pun/sys/dashboard).
Ingresar su usuario y contraseña:

![](img_myriam/acceso1a.png){fig-align="center" width="50%"}

### *Definiendo el directorio de trabajo*

El primer paso es definir un directorio de trabajo. El directorio o carpeta de trabajo es aquel en que se va a buscar los archivos

#### Dar click en Files y escoger `/fs/scratch/PAS2250/mizarra`

#### Buscar su usuario y entrar al folder

![](img_myriam/acceso2_.png){width="50%"}

#### Abrir VS Code

- You should already have a VS Code session, but if not, see the instructions below.

:::{.callout-note collapse="true"}
##### Starting VS Code at OSC - Instructions in brief _(Click to expand)_
1. Log in to OSC's OnDemand portal at <https://ondemand.osc.edu>.
2. In the blue top bar, select `Interactive Apps`
   and then near the bottom of the dropdown menu, click `Code Server`.
3. In the form that appears on a new page:
   - Select OSC project `PAS2250`
   - The starting directory: `/fs/scratch/PAS2250/ENT6703/<your_personal_dir>`
   - `Number of hours`: `10`
   - Click `Launch`.
4. On the next page, once the top bar of the box has turned green
   and says `Runnning`, click `Connect to VS Code`.
:::

- Ingresar a su carpeta:

```bash
cd /fs/scratch/PAS2250/cabana/$USER
```

### *Archivos* Ingresar a cada carpeta del usuario según sus apellidos

-   Reads:

```bash
ls ../mizarra/***usuario_nuevo***/reads

# Por ejemplo: ../mizarra/01_RFlores/reads
```

-   Contig de secuencia de referencia:

```bash
ls ../mizarra/***usuario_nuevo***/ref
```

### *Copiar directorios (folders)*

-   Para copiar directorios (folders) a una nueva ubicación en Linux, puedes usar el comando `cp` (copy)

-   Verificar que el nombre ***usuario_nuevo*** tenga el nombre de carpeta creada por ustedes en el **OSC**

-   Crear carpeta llamada Phytophthora en su carpeta nueva

```bash
mkdir Phytophthora
```

#### **Comando 1: Reads**

```bash
cp -rv ../mizarra/***usuario_nuevo***/reads Phytophthora/reads
```

#### **Comando 2: Referencia**

```bash
cp -rv ../mizarra/***usuario_nuevo***/ref Phytophthora/ref
```

## *Softwares utilizados*

- **bwa**: Mapeo de secuencias de ADN contra el genoma de referencia.

- **samtools**: Para manipular alineaciones en formato SAM.

- **bcftools**: Para llamar variantes y manipular VCF y BCF.

## Script a ser corrido

### Cargar los *softwares*

```bash
module load miniconda3
source activate /fs/ess/PAS0471/jelmer/conda/cabana
```

### Ubicación en la carpeta de la *referencia*

```bash
cd Phytophthora/ref
```

#### *BWA index* para crear un índice para un genoma de referencia

```bash
bwa index Pinf2021refs.fa
```

#### Hacer un índice de archivo *fasta* del genoma de referencia

```bash
samtools faidx Pinf2021refs.fa
```

### Ubicación en la carpeta *reads*

```bash
cd ../reads
```

#### Alineamiento a la referencia

```bash
for file in *.fq.gz; do
    bwa mem ../ref/Pinf2021refs.fa "$file" > "${file/fq.gz/sam}"
done
```

#### Ordenar los alineamientos

```bash
for file in *.sam; do
    samtools sort -o "${file/sam/sorted.sam}" "$file"
done
```

#### Convertir archivos SAM a BAM

```bash
for file in *sorted.sam; do
    samtools view -bt ../ref/Pinf2021refs.fa.fai -o "${file/sorted.sam/bam}" "$file"
done
```

#### Remover archivos SAM

```bash
rm *.sam
```

#### Copiar los archivos *bam* (n=25) a una carpeta en común

```bash
cp *.bam /fs/scratch/PAS2250/cabana/Phytophthora/reads
```

#### Crear un listado de los archivos bam de todos los alumnos (n=25). Esperar que esten los 25 archivos bam.

-   Ubicarnos en la carpeta que tiene todos los archivos bam

```bash
ls /fs/scratch/PAS2250/cabana/Phytophthora/reads/*.bam > listbam
```

#### Llamado de Variantes SNPs

-   *Ubicarnos en la carpeta que contiene el archivo*listbam*generado*

```bash
bcftools mpileup -Ou -f ../ref/Pinf2021refs.fa -b listbam |
    bcftools call -mv -o perupop.vcf
```

#### Filtrar posiciones de SNP

```bash
bcftools filter -Ov -o perupop_filtered.vcf -s LOWQUAL \
  -e 'QUAL<10 || DP <10'  --SnpGap 5 --set-GTs \
  . perupop.vcf
```

#### Mantener sólo los SNP con calidad chequeada

```bash
bcftools view -f PASS perupop_filtered.vcf > perupop_filtered_final.vcf
```

<br>

## *Rstudio*

### Crear una carpeta llamada *Rstudio*

```bash
mkdir ../Rstudio
```

### Copiar el archivo *.vcf

```bash
cp perupop_filtered_final.vcf ../Rstudio/

cp /fs/scratch/PAS2250/cabana/Phytophthora/new_names_peru.csv ../../Rstudio/
```

### Cargar Rstudio en el OSC OnDemand

*Ingresar* [SupercomputerCenter](https://ondemand.osc.edu/pun/sys/dashboard)

#### Seleccionar Rstudio Server

#### Iniciar Rstudio : cluster pitzer 5.3.3 "click en Launch" -setear número de horas

#### Seleccionar el directorio de trabajo: `/fs/scratch/PAS2250/cabana/$USER/Rstudio`

![](img_myriam/Rstudio-OnDemand.png){fig-align="center" width="100%"}

### Cargar las librerias

```{r}
# Cargar modulos - <https://www.osc.edu/resources/available_software/software_list/r#import_modules>
source(file.path(Sys.getenv("LMOD_PKG"), "init/R"))
module("load", "gdal/3.3.1")
module("load", "proj/8.1.0")
module("load", "geos/3.9.1")
module("load", "sqlite/3.36.0")

# Cargar links de libreria dinamica
dyn.load("/apps/proj/8.1.0/lib/libproj.so.22", local=FALSE)
dyn.load("/apps/gdal/3.3.1/lib/libgdal.so.29", local=FALSE)
dyn.load("/apps/geos/3.9.1/lib/libgeos_c.so", local=FALSE)

# Definir y configurar el directorio de la libreria
libdir <- "/fs/ess/PAS0471/jelmer/R/peru"
.libPaths(libdir)

library(vcfR)
library(poppr)
library(ape)
library(adegenet)
library(RColorBrewer)
library(viridis)
library(ggplot2)
library(ggtree) 
library(dartR)
library(directlabels)
library(viridisLite)
```

### Analysis {-}

```{r}
# Replace usuario_nuevo with your username!
setwd("/fs/scratch/PAS2250/cabana/usuario_nuevo")
```

```{r }
# Cargar el archivo vcf generado con bcftools
perupop.VCF <- read.vcfR("perupop_filtered_final.vcf")
```

```{r}
# Convertir el conjunto de datos en un objeto genlight
gl.perupop <- vcfR2genlight(perupop.VCF)
```

```{r}
ploidy(gl.perupop) <- 2
```

```{r}
# Renombrar las muestras
gl.perupop_recoded <- gl.recode.ind(gl.perupop,
                                    ind.recode="new_names_peru.csv", 
                                    mono.rm = T, verbose=0)

gl.perupop_recoded
```

```{r}
#Asignar el linaje clonal de las muestras en el orden delos genotipos reportados

pop(gl.perupop_recoded) <- as.factor(c("US-1",
"US-1",
"PE-3",
"PE-3",
"PE-3",
"EC-1",
"EC-1",
"EC-1",
"EC-1",
"PE-7",
"PE-7",
"US-1",
"US-1",
"US-1",
"US-1",
"US-1",
"EC-1",
"EC-1",
"EC-1",
"EC-1",
"EC-1",
"EC-1",
"EC-1",
"PE-3",
"PE-7",
"PE-7",
"PE-7",
"PE-7",
"PE-7",
"PE-7",
"PE-3",
"PE-3",
"PE-3",
"PE-3",
"PE-3",
"PE-3",
"US-1",
"US-1",
"US-1",
"US-1",
"US-1",
"US-1",
"US-1",
"PE-7-Puno",
"PE-7-Puno",
"PE-7-Puno",
"PE-7-Puno",
"PE-7-Puno",
"PE-7-Puno",
"PE-7-Puno",
"PE-7-Puno",
"PE-7-Puno",
"PE-7-Puno",
"PE-7-Puno",
"PE-7-Puno"))
```

### Dendograma basado en el algoritmo UPGMA

```{r, message=FALSE, out.width='90%', fig.height=7}
#La función aboot se utiliza para evaluar la precisión del árbol de
#decisión ajustado mediante la validación cruzada bootstrap.

tree <- aboot(gl.perupop_recoded, tree = "upgma", distance = bitwise.dist, 
              sample = 100, showtree = F, cutoff = 50, quiet = T)

cols <- turbo(n = nPop(gl.perupop_recoded))
plot.phylo(tree, cex = 0.8, font = 2, adj = 0, tip.color =  cols[pop(gl.perupop_recoded)])
nodelabels(tree$node.label, adj = c(1.3, -0.5), frame = "n", cex = 0.8,font = 3, xpd = TRUE)
legend('topleft', legend = c("EC-1","PE-3", "PE-7", "PE-7-Puno", "US-1"), fill = cols, 
       border = FALSE, bty = "n", cex = 0.55)
axis(side = 1)
title(xlab = "Genetic distance (proportion of loci that are different)")

dev.off()
```

```{r}
# Guardar el Gráfico
png("Tree_alldata.png", res = 300, width = 9.57, height = 9.34, units = 'in')
plot.phylo(tree, cex = 0.8, font = 2, adj = 0, tip.color =  cols[pop(gl.perupop_recoded)])
nodelabels(tree$node.label, adj = c(1.3, -0.5), frame = "n", cex = 0.8,font = 3, xpd = TRUE)
legend('topleft', legend = c("EC-1","PE-3", "PE-7", "PE-7-Puno", "US-1"), fill = cols, 
       border = FALSE, bty = "n", cex = 0.55)
axis(side = 1)
title(xlab = "Genetic distance (proportion of loci that are different)")

dev.off()
```

```{r, out.width='70%'}
# Reporte de la calidad de la data
gl.report.callrate(gl.perupop_recoded, method ="loc")

gl.report.callrate(gl.perupop_recoded, method ="ind")
```

```{r, out.width='70%'}
# Filtrar la data 0.8189447
gl.perupop2 <- gl.filter.callrate(gl.perupop_recoded,
                                  method="ind", 
                                  t=0.8189447,
                                  recalc = T)
```

```{r}
names(gl.perupop2) 
gl.perupop2$ind.names
gl.perupop2$pop
```

```{r}
pop(gl.perupop2) <- as.factor(c("US-1",
"US-1",
"PE-3",
"EC-1",
"EC-1",
"PE-7",
"PE-7",
"US-1",
"US-1",
"US-1",
"US-1",
"EC-1",
"EC-1",
"PE-3",
"PE-7",
"PE-7",
"PE-7",
"PE-7",
"PE-7",
"PE-7",
"PE-3",
"PE-3",
"PE-3",
"PE-3",
"PE-3",
"US-1",
"US-1",
"US-1",
"US-1",
"PE-7-Puno",
"PE-7-Puno",
"PE-7-Puno",
"PE-7-Puno"
))

```

```{r, fig.height=5}
# Árbol de distancia basado en el algoritmo UPGMA, con 100 replicados de bootstrap
tree2 <- aboot(gl.perupop2, tree = "upgma", distance = bitwise.dist, 
              sample = 100, showtree = F, cutoff = 50, quiet = T)

cols <- turbo(n = nPop(gl.perupop2))
plot.phylo(tree2, cex = 0.8, font = 2, adj = 0, tip.color =  cols[pop(gl.perupop2)])
nodelabels(tree2$node.label, adj = c(1.3, -0.5), frame = "n", cex = 0.8,font = 3, xpd = TRUE)
legend('topleft', legend = c("EC-1","PE-3", "PE-7", "PE-7-Puno", "US-1"), fill = cols, 
       border = FALSE, bty = "n", cex = 0.65)
axis(side = 1)
title(xlab = "Genetic distance (proportion of loci that are different)")

dev.off()
```

```{r}
# Guardar el Gráfico
png("Tree_filter0.8189447.png", res = 300, width = 9.57, height = 9.34, units = 'in')
plot.phylo(tree2, cex = 0.8, font = 2, adj = 0, tip.color =  cols[pop(gl.perupop2)])
nodelabels(tree2$node.label, adj = c(1.3, -0.5), frame = "n", cex = 0.8,font = 3, xpd = TRUE)
legend('topleft', legend = c("EC-1","PE-3", "PE-7", "PE-7-Puno", "US-1"), fill = cols, 
       border = FALSE, bty = "n", cex = 0.65)
axis(side = 1)
title(xlab = "Genetic distance (proportion of loci that are different)")

dev.off()
```

### Analisis de Coordenadas Principales (PCoA) usando la matriz de distancias

```{r}
# 
subset_phytoph <- gl.recalc.metrics(gl.perupop2)
subset_phytoph$other$loc.metrics <- as.data.frame(subset_phytoph$other$loc.metrics)


pcoa <- gl.pcoa(subset_phytoph, nfactors = 5)
```

```{r}
gl.pcoa.plot(pcoa, gl.perupop2)
```
