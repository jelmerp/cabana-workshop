[
  {
    "objectID": "rstudio.html#steps-to-start-an-rstudio-session-at-osc",
    "href": "rstudio.html#steps-to-start-an-rstudio-session-at-osc",
    "title": "Starting an RStudio session at OSC",
    "section": "Steps to start an RStudio session at OSC",
    "text": "Steps to start an RStudio session at OSC\n\nIf you haven’t already: create an OSC account by following the link in the email you received from the Ohio Supercomputer Center (OSC).\nGo to https://ondemand.osc.edu and log in — use the simple username + password login on the left.\nClick on Interactive Apps (top bar) and then RStudio Server (all the way at the bottom)\nFill out the form as follows:\n\nCluster: Pitzer\nR version: 4.3.0\nProject: PAS2250\nNumber of hours: 4\nNode type: any\nNumber of cores: 2\n\n\n\n\nClick to see a screenshot\n\n\n\n\n\n\n\n\nClick the big blue Launch button at the bottom\nNow, you should be sent to a new page with a box at the top for your RStudio Server “job”, which should initially be “Queued” (waiting to start).\n\n\n\nClick to see a screenshot\n\n\n\n\n\n\n\n\nYour job should start running very soon, with the top bar of the box turning green and saying “Running”.\n\n\n\nClick to see a screenshot\n\n\n\n\n\n\n\n\nClick Connect to RStudio Server at the bottom of the box, and an RStudio Server instance will open in a new browser tab. You’re ready to go!\n\n\n\n\n\n\n\n\nHaving trouble installing the tidyverse package?\n\n\n\nIf you are using RStudio at OSC for your homework, and the installation of the tidyverse package (or another package) with install.packages() fails, please load the packages that the Carpentries lesson uses as follows (no installation needed):\n\ncustom_library &lt;- \"/fs/scratch/PAS2250/ENT6703/share/rlib\"\nlibrary(tidyverse, lib.loc = custom_library)\nlibrary(hexbin, lib.loc = libdir)\nlibrary(patchwork, lib.loc = libdir)\nlibrary(RSQLite, lib.loc = libdir)"
  },
  {
    "objectID": "open_shell.html",
    "href": "open_shell.html",
    "title": "Opening a Unix Shell at OSC",
    "section": "",
    "text": "If you’re going to use a Unix shell at OSC for your homework, make sure to also run the step at the bottom of this page, to copy the data set for the Software Carpentry lession."
  },
  {
    "objectID": "open_shell.html#open-a-unix-shell-at-the-ohio-supercomputer-center-osc",
    "href": "open_shell.html#open-a-unix-shell-at-the-ohio-supercomputer-center-osc",
    "title": "Opening a Unix Shell at OSC",
    "section": "Open a Unix shell at the Ohio Supercomputer Center (OSC)",
    "text": "Open a Unix shell at the Ohio Supercomputer Center (OSC)\n\nIf you haven’t already: create an OSC account by following the link in the email you received from OSC.\nGo to https://ondemand.osc.edu and log in — use the simple username + password login on the left.\nOnce you are logged in, you should see a landing page similar to the one below:\n\n\n\n\n\nClick on the Clusters dropdown menu in the top blue bar, and then on Pitzer Shell Access:\n\n\n\n\n\n\n\nThis should open a new browser tab that looks approximately like this:\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour screen will be slightly different from the screenshot above:\n\n\n\n\nYou should see even more “welcome messages” (which is everything except for the last line), and some of these are personalized, so they will differ for you.\nThe last line in the screenshot (jelmer@pitzer-login04 ~]$) is your shell “prompt”, which is personalized as well:\n\nYou will see your own username (not jelmer) before the @\nYou may be on a different “login node” so may e.g. see @pitzer-login03"
  },
  {
    "objectID": "open_shell.html#copy-the-software-carpentry-data-set",
    "href": "open_shell.html#copy-the-software-carpentry-data-set",
    "title": "Opening a Unix Shell at OSC",
    "section": "Copy the Software Carpentry data set",
    "text": "Copy the Software Carpentry data set\nIf you opened a shell at OSC to do the Unix shell homework, then please also perform the following step:\n\nCopy and paste the following code in your Unix shell, and then press Enter:\n\nmkdir Desktop\ncp -r /fs/scratch/PAS2250/cabana/homework/shell/shell-lesson-data Desktop/\nThe above code created a folder (directory) called “Desktop” in your home directory, and copied the Software Carpentry dataset into the new Desktop folder. Now, you should be able to skip everything on the Software Carpentry “Summary and Setup” page.\n\n\n\n\n\n\n\nIf you run into any problems, don’t hesitate to email Jelmer Poelstra."
  },
  {
    "objectID": "03_shell.html#overview-setting-up",
    "href": "03_shell.html#overview-setting-up",
    "title": "Unix Shell refresher",
    "section": "1 Overview & setting up",
    "text": "1 Overview & setting up\nMany of the things you typically do by pointing and clicking can alternatively be done by typing commands. The Unix shell allows you to interact with computers via commands.\nWorking effectively on a remote supercomputer tends to simply require using a command line interface. But there are more advantages to doing command line computing than just allowing you to work on a supercomputer, such as:\n\nWorking efficiently with large files\nAchieving better reproducibility in research\nPerforming general computing tasks more efficiently (once you get the hang of it…)\nMaking it easier to repeat similar tasks across files, samples, and projects\nFor bioinformatics, being able to use (the latest) command-line programs directly without having to depend on “GUI wrappers” written by third parties, that often cost money and also lag behind in functionality\n\n\nStarting a VS Code session in OSC OnDemand\nWe’ll use a Unix shell at OSC inside VS Code. You should have an active VS Code session in the folder /fs/scratch/PAS2250/cabana/&lt;user&gt;, and with an open Terminal — if not, see the instructions in the dropdown box right below.\n\n\n\n\n\n\nStarting VS Code at OSC - with a Terminal (Click to expand)\n\n\n\n\n\n\nLog in to OSC’s OnDemand portal at https://ondemand.osc.edu.\nIn the blue top bar, select Interactive Apps and then near the bottom of the dropdown menu, click Code Server.\nIn the form that appears on a new page:\n\nSelect OSC project PAS2250\nThe starting directory: /fs/scratch/PAS2250/cabana/&lt;user&gt;\nNumber of hours: 10\nClick Launch.\n\nOn the next page, once the top bar of the box has turned green and says Runnning, click Connect to VS Code.\nOpen a Terminal by clicking      =&gt; Terminal =&gt; New Terminal. (Or use one of the keyboard shortcuts: Ctrl+` (backtick) or Ctrl+Shift+C.)\nType pwd to check where you are. If you are not in /fs/scratch/PAS2250/cabana/&lt;user&gt;, click Open folder... in the Welcome tab, or      =&gt;   File   =&gt;   Open Folder, then type/select /fs/scratch/PAS2250/cabana/&lt;user&gt; and press Ok.\n\n\n\n\n\n\n\n\n\n\nSome Unix shell terminology\n\n\n\nWe’re going to focus on the practice of doing command line computing here, and not get too bogged down in terminology, but let’s highlight a few interrelated terms you’re likely to run across:\n\nCommand Line — the most general term, an interface where you type commands\nTerminal — the program/app/window that can run a Unix shell\nShell — a command line interface to your computer\nUnix Shell — the types of shells on Unix family (Linux + Mac) computers\nBash — the specific Unix shell language that is most common on Unix computers\n\nWhile it might not fly for a computer science class, for day-to-day computing/bioinformatics, you’ll probably hear all these terms used somewhat interchangeably."
  },
  {
    "objectID": "03_shell.html#recap-of-the-basics",
    "href": "03_shell.html#recap-of-the-basics",
    "title": "Unix Shell refresher",
    "section": "2 Recap of the basics",
    "text": "2 Recap of the basics\n\n2.1 The prompt\nInside your terminal, the “prompt” indicates that the shell is ready for a command. What is shown exactly varies a bit across shells and can also be customized, but our prompts at OSC should show the following:\n[&lt;username&gt;@&lt;node-name&gt; &lt;working-dir&gt;]$\nFor example:\n[jelmer@p0080 jelmer]$ \nWe type our commands after the dollar sign, and then press Enter to execute the command. When the command has finished executing, we’ll get our prompt back and can type a new command.\n\n\n\n\n\n\nHow shell code is shown on this website\n\n\n\n\nThe gray boxes like the ones shown above will be used to show the command line expressions that you should type.\nIn upcoming boxes, the prompt itself ([...]$) will not be shown, but only the command line expressions that you type. This is to save space and to allow you for copy-and-pasting (but I recommend typing!).\nPaler gray boxes (below the boxes with command have & with italic text) show the output of commands.\n\n\n\n\n\n\n2.2 A few simple commands: date, whoami, pwd\nThe Unix shell comes with hundreds of “commands”: small programs that perform specific actions. If you’re familiar with R or Python, a Unix command is like an R/Python function.\nLet’s start with a few simple commands:\n\nThe date command prints the current date and time:\n\ndate\nFri Jan 26 14:31:51 EST 2024\n\nThe whoami (who-am-i) command prints your username:\n\nwhoami\njelmer\n\nThe pwd (Print Working Directory) command prints the path to the directory you are currently located in:\n\npwd\n/fs/scratch/PAS2250/cabana/jelmer\nAll 3 of those commands provided us with some output. That output was printed to screen, which is the default behavior for nearly every Unix command.\n\n\n\n\n\n\nWorking directory and paths\n\n\n\n\nWhen working in a Unix shell, you are always “in” a specific directory and this is called your working directory.\nIn a path (= location of a file or directory) such as that output by pwd, directories are separated by forward slashes /. (And a leading forward slash, if present, indicates the computer’s root directory.)\n\n\n\n\n\n\n\n\n\nGeneral shell tips\n\n\n\n\nEverything in the shell is case-sensitive, including commands and file names.\nAvoid spaces in file and directory names! Use e.g. underscores or capitalization to distinguish words.\n\n\n\n\n\n\n2.3 cd and command actions & arguments\nIn the above three command line expressions:\n\nWe merely typed a command and nothing else\nThe command provided some information, which was printed to screen\n\nBut many commands perform an action other than providing information. For example, you can use the command cd to Change Directory (i.e. change your working dir). And like many commands that perform an action, cd normally has no output at all.\nLet’s use cd to move to another directory by specifying the path to that directory after the cd command:\ncd /fs/scratch/PAS2250/cabana/share\npwd\n/fs/scratch/PAS2250/cabana/share\n\n\n\n\n\n\nI will demonstrate “tab completion”!\n\n\n\n\n\n\nIn more abstract terms, what we did above was to provide cd with an argument, namely the path of the dir to move to. Arguments generally tell commands what file or directory to operate on.\nAs we’ve seen, then, cd gives no output when it succesfully changed the working directory. But let’s also see what happens when it does not succeed — it gives an error:\ncd /fs/Scratch/PAS2250\nbash: cd: /fs/Scratch/PAS2250: No such file or directory\n\n\nYour Turn: What was the problem with the path we specified? (Click to see the answer)\n\nWe used a capital S in /Scratch/ — this should have been /scratch/.\nAs pointed out above, paths (dir and file specifications) are case-sensitive on Unix systems!\n\n\n\n\n2.4 ls and command options\n\nThe default behavior of ls\nThe ls command, short for “list”, will list files and directories:\nls\ndata  README.md\n(You should still be in /fs/scratch/PAS2250/cabana/share. If not, cd there first.)\n\n\n\n\n\n\nSide note: ls output colors (click to expand)\n\n\n\n\n\nUnfortunately, the ls output shown above does not show the different colors you should see in your shell — here are some of the most common ones:\n\nEntries in blue are directories (like data and metadata above)\nEntries in black are regular files (like README.md above)\nEntries in red are compressed files (we’ll see an example soon).\n\n\n\n\nThis default way that ls shows the output can be changed by providing ls with options.\n\n\nOptions (to ls)\nIn general, whereas arguments tell a command what to operate on, options will modify its behavior. For example, we can call ls with the option -l (a dash followed by a lowercase L):\nls -l \ntotal 17\ndrwxr-xr-x 5 jelmer PAS0471 4096 Jan 21 12:39 data\n-rw-r--r-- 1 jelmer PAS0471 1502 Jan 22 11:04 README.md\nNotice that it lists the same items as our first ls call above, but printed in a different format: one item per line, with additional information included, such as the date and time each file was last modified, and the file sizes in bytes (to the left of the date).\nLet’s add another option, -h:\nls -l -h\ntotal 17K\ndrwxr-xr-x 5 jelmer PAS0471 4.0K Jan 21 12:39 data\n-rw-r--r-- 1 jelmer PAS0471 1.5K Jan 22 11:04 README.md\n\n\nYour Turn: What is different about the output, and what do you think that means? (Click to see the answer)\n\nThe only difference is in the format of the column reporting the sizes of the items listed.\nWe now have “Human-readable filesizes” (hence -h), where sizes on the scale of kilobytes will be shown with Ks, of megabytes with Ms, and of gigabytes with Gs. That can be really useful especially for very large files.\n\nConveniently, options can be pasted together as follows:\nls -lh\n\n\nCombining options and arguments\nArguments to ls should be dirs or files to operate on. For example, if we wanted to see what’s inside the data dir, instead of inside our working dir, we could type:\nls data\nfastq  meta  ref\nThe data dir appears to contain three (sub)dirs with different kinds of data. We’ll talk in detail about that later, but for now let’s look inside the fastq dir:\nls data/fastq\nERR10802863_R1.fastq.gz  ERR10802865_R2.fastq.gz  ERR10802868_R1.fastq.gz  ERR10802870_R2.fastq.gz  ERR10802875_R1.fastq.gz  ERR10802877_R2.fastq.gz  ERR10802880_R1.fastq.gz  ERR10802882_R2.fastq.gz  ERR10802885_R1.fastq.gz\nERR10802863_R2.fastq.gz  ERR10802866_R1.fastq.gz  ERR10802868_R2.fastq.gz  ERR10802871_R1.fastq.gz  ERR10802875_R2.fastq.gz  ERR10802878_R1.fastq.gz  ERR10802880_R2.fastq.gz  ERR10802883_R1.fastq.gz  ERR10802885_R2.fastq.gz\nERR10802864_R1.fastq.gz  ERR10802866_R2.fastq.gz  ERR10802869_R1.fastq.gz  ERR10802871_R2.fastq.gz  ERR10802876_R1.fastq.gz  ERR10802878_R2.fastq.gz  ERR10802881_R1.fastq.gz  ERR10802883_R2.fastq.gz  ERR10802886_R1.fastq.gz\nERR10802864_R2.fastq.gz  ERR10802867_R1.fastq.gz  ERR10802869_R2.fastq.gz  ERR10802874_R1.fastq.gz  ERR10802876_R2.fastq.gz  ERR10802879_R1.fastq.gz  ERR10802881_R2.fastq.gz  ERR10802884_R1.fastq.gz  ERR10802886_R2.fastq.gz\nERR10802865_R1.fastq.gz  ERR10802867_R2.fastq.gz  ERR10802870_R1.fastq.gz  ERR10802874_R2.fastq.gz  ERR10802877_R1.fastq.gz  ERR10802879_R2.fastq.gz  ERR10802882_R1.fastq.gz  ERR10802884_R2.fastq.gz\nAh, FASTQ files! These contain our sequence data, and we’ll go and explore them in a bit.\nFinally, we can combine options and arguments, and let’s do so take a closer look at our dir with FASTQ files — now the -h option is especially useful and allows us see that the FASTQ files are 21-22 Mb in size:\nls -lh data/fastq\ntotal 941M\n-rw-r--r-- 1 jelmer PAS0471 21M Jan 21 13:34 ERR10802863_R1.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 22M Jan 21 13:34 ERR10802863_R2.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 21M Jan 21 13:34 ERR10802864_R1.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 22M Jan 21 13:34 ERR10802864_R2.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 22M Jan 21 13:34 ERR10802865_R1.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 22M Jan 21 13:34 ERR10802865_R2.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 21M Jan 21 13:34 ERR10802866_R1.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 22M Jan 21 13:34 ERR10802866_R2.fastq.gz\n[...output truncated...]\n\n\n Your Turn: List the files in the data/ref dir. What are the file sizes? (Click for the solution)\n\nls -lh data/ref\ntotal 670M\n-rw-r--r-- 1 jelmer PAS0471 547M Jan 20 22:34 GCF_016801865.2.fna\n-rw-r--r-- 1 jelmer PAS0471 123M Jan 20 22:34 GCF_016801865.2.gtf\nThe .fna file (this is the genome assembly nucleotide FASTA file) is 547 Mb (not bases but bytes!), and the .gtf file (this is the annotation file) is 123 Mb.\n\n\n\n\n\n2.5 A few more general shell tips\n\nCommand history: If you hit the ⇧ (up arrow) once, you’ll retrieve your most recent command, and if you keep hitting it, you’ll go further back. The⇩ (down arrow) will go the other way: towards the present.\nYour cursor can be anywhere on a line (not just at the end) when you press Enter to execute a command!\nIf your prompt is missing, the shell is either still busy executing your command, or you typed an incomplete command. To abort in either of these two scenarios, press Ctrl+C and you’ll get your prompt back.\nAnything that comes after a # is considered a comment instead of code!\n\n# This entire line is a comment - you can run it and nothing will happen\npwd    # 'pwd' will be executed but everything after the '#' is ignored\n/fs/scratch/PAS2250/cabana/jelmer\n\n\n\n Your Turn: Move into your personal directory, and then back into the share dir (Click for the solution)\n\ncd /fs/scratch/PAS2250/cabana/jelmer\ncd /fs/scratch/PAS2250/cabana/share\n\n\n\n Your Turn: Use the command history (arrows) to repeat the previous exercise without typing anything.\n\n\n\n\n\n Your Turn (Bonus): Two periods .. means the directory “one level up” (towards the computer’s root dir): running cd .. will move you one dir level up. Try to make use of this move into your personal dir and back to share again, instead of using the “full paths” like above. (Click for the solution)\n\ncd ../jelmer\ncd ../share\nA little more detail about this, for those that are interested:\n\nPaths that start with a /, i.e. paths that start from the computer’s root directory, are called “absolute” or “full paths” (you can think of them as GPS coordinates, they work regardless of where you are located).\nPaths that do not start with / (are always supposed to) start from your current working directory and are called “relative paths”. We’ve used them above with ls data and ls data/fastq. The .., then, is a mechanism to go “up” in the dir hierarchy when using a relative path! They work more like directions along the lines of “take the second left” in the sense that they depend on your current location.\n\n\n\n\n Your Turn (Bonus): Practice aborting commands (Click for the instructions)\n\nTo simulate a long-running command that we may want to abort, we can use the sleep command, which will make the computer wait for a specified amount of time until giving your prompt back:\nsleep 60s\nRun that command and instead of waiting for the full 60 seconds, press Ctrl + C to get your prompt back sooner!\nOr, an example of an incomplete command (an opening parenthesis ():\n(\nRun the code above, see what happens, and press Ctrl + C to get your prompt back.\n\n\n\n\n2.6 Paths\n“Paths” specify the locations of files or dirs on a computer, and there are two distinct ways of specifying them:\n\nAbsolute (full) paths\nThese always start from the root directory of the computer, which is represented by a leading /, such as in /fs/scratch/PAS2250/1.\nRelative paths\nThese start from your current working directory. When we typed ls data earlier, we indicated that we wanted to show the contents of the data directory located inside our current working directory2.\n\nThere are a couple of “shortcuts” available for relative paths:\n\n. (a single period)\nThis is another way of representing the current working directory. Therefore, for instance, ls ./data is functionally the same as ls data.\n.. (two periods)\nThis means one level up in the directory hierarchy, with “up” meaning towards the root directory.\n\nls ..               # One level up, listing /fs/ess/PAS0471/demo\n202307_rnaseq\nThis pattern can be continued all the way to the root of the computer, so ../.. would list files two levels up:\nls ../..            # Two levels up, listing /fs/ess/PAS0471\naarevalo       conroy      frederico       Nisha     osu8947              ross\nacl            containers  hsiangyin       osu10028  osu9207              Saranga\nAlmond_Genome  danraywill  jelmer          osu10436  osu9207_Lubell_bkup  Shonna\namine1         data        jelmer_osu5685  osu5685   osu9390              SLocke\nap_soumya      demo        jlhartman       osu6702   osu9453              sochina\naudreyduff     dhanashree  linda           osu8107   osu9657\nbahodge11      edwin       Maggie          osu8468   pipeline\ncalconey       ferdinand   mcic-scripts    osu8548   poonam\ncamila         Fiama       Menuka          osu8618   raees\nCecilia        Flye        nghi            osu8900   rawalranjana44\n\n\n\n\n\n\nThese shortcuts work with all commands\n\n\n\nAll of the above shortcuts are general shell shortcuts that work with any command that takes a path.\nAlso: ~ represents your Home directory, so cd ~ would move there and ls ~ would list the files there.\n\n\n\n\n\n\n\n\nMany bioinformatics programs are basically specialized commands\n\n\n\nIn many ways, you can think of using a command-line bioinformatics program as using just another command. Therefore, our general skills with Unix commands will very much extend to using command-line bioinformatics tools!"
  },
  {
    "objectID": "03_shell.html#footnotes",
    "href": "03_shell.html#footnotes",
    "title": "Unix Shell refresher",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n Absolute paths are like GPS coordinates to specify a geographic location on earth: they will provide location information regardless of where we are ourselves.↩︎\nRelative paths are more like directions to a location that say things like “turn left” — these instructions depend on our current location.↩︎"
  },
  {
    "objectID": "homework.html",
    "href": "homework.html",
    "title": "R and Unix Shell Homework",
    "section": "",
    "text": "If you have very limited or no experience with R and/or the Unix shell, please go through the following homework before you need these skills in the workshop on Wednesday.\nIf you do have some experience with R and the Unix shell, we would suggest that you at least take a look at the material below, to check that you are familiar with most or all of its contents."
  },
  {
    "objectID": "homework.html#r",
    "href": "homework.html#r",
    "title": "R and Unix Shell Homework",
    "section": "R",
    "text": "R\nPlease work your way through the first part of the Data Carpentry “Data Analysis and Visualisation in R for Ecologists” lesson. Specifically, go through:\n\nThe introductory page\nThe first lesson (“Before we start”)\nThe second lesson (“Introduction to R”)\nThe third lesson (“Starting with data”) — until (not including) the “Formatting dates” section.\n\n\n\n\n\n\n\n\nHaving trouble installing R or RStudio?\n\n\n\nYou should be able to install R and RStudio regardless of your operating system (Windows, Mac, or Linux), and the Carpentry lesson contain instructions on how to do so.\nBut in case you are having trouble, you can also use R and RStudio through your browser with the Ohio Supercomputer Center (OSC). To start an RStudio session at OSC, follow these instructions elsewhere on this website."
  },
  {
    "objectID": "homework.html#unix-shell",
    "href": "homework.html#unix-shell",
    "title": "R and Unix Shell Homework",
    "section": "Unix shell",
    "text": "Unix shell\nPlease work your way through the Software Carpentry “Shell Novice” lesson up until and including at least episode 3 (“Working With Files and Directories”).\nYou can optionally make your way through the remaining episodes, but that content will in part be taught in the workshop itself, and in part not be used at all.\n\n\n\n\n\n\n\nUsing Windows?\n\n\n\nIf your computer uses the Windows operating system, you will not have a Unix shell installed by default1. To go through the lesson above, you have two options:\n\nInstall a Unix shell\nFollow the instructions in the Software Carpentry lesson that I linked to above (and here is a direct link to the installation instructions). If this fails for you, please use the next option instead.\nUse a Unix shell at the Ohio Supercomputer Center (OSC)\nFollow these instructions elsewhere on this website."
  },
  {
    "objectID": "homework.html#footnotes",
    "href": "homework.html#footnotes",
    "title": "R and Unix Shell Homework",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIf you have a Mac or Linux computer, you should have a Unix shell installed.↩︎"
  },
  {
    "objectID": "01_osc.html#introduction",
    "href": "01_osc.html#introduction",
    "title": "Intro to the Ohio Supercomputer Center (OSC)",
    "section": "1 Introduction",
    "text": "1 Introduction\n\n1.1 Computational infrastructure overview\nDue in large part to the amount of data involved, a laptop or desktop computer is often not sufficient to work with genomics data.\nAdditionally, most of the specialized programs that help you analyze your data can only be run through a “command-line interface”.\nTherefore, a typical computational infrastructure to do what we may call “command-line genomics” involves:\n\nA supercomputer1 — in our case, the Ohio Supercomputer Center (OSC) [this session]\nA text editor — I recommend and will demonstrate VS Code [next session]\nThe Unix shell (terminal) [third session]\nR (or perhaps Python) for interactive statistical analysis and visualization [this afternoon]\n\nThis session will provide an introduction to supercomputers in general and to the Ohio Supercomputer Center (OSC) specifically. In all of today’s and tomorrow’s sessions at this workshop, we’ll continue to work at OSC, so you will get a fair bit of experience with working at a supercomputer.\n\n\n\n1.2 Supercomputers\nA supercomputer (also known as a “compute cluster” or simply a “cluster”) consists of many computers that are connected by a high-speed network, and that can be accessed remotely by its users. In more general terms, supercomputers provide high-performance computing (HPC) resources.\nThis is what Owens, one of the OSC supercomputers, physically looks like:\n\n\n\nHere are some possible reasons to use a supercomputer instead of your own laptop or desktop:\n\nYour analyses take a long time to run, need large numbers of CPUs, or a large amount of memory.\nYou need to run some analyses many times.\nYou need to store a lot of data.\nYour analyses require specialized hardware, such as GPUs.\nYour analyses require software available only for the Linux operating system, but you use Windows.\n\nWhen you’re working with genomic data, many of these reasons typically apply. This can make it hard or simply impossible to do all your work on your personal workstation, and supercomputers provide a solution.\n\n\n\n\n\n\nSide note: What works differently on a supercomputer like at OSC? (Click to expand)\n\n\n\n\n\nCompared to command-line computing on a laptop or desktop, the following aspects are different when working on a supercomputer like at OSC:\n\nLogin versus compute nodes\n“Login nodes”, the nodes you end up on after logging in, are not meant for heavy computing and you have to request access to “compute nodes” to run most analyses.\n“Non-interactive” computing is common\nIt is common to write and “submit” scripts to a queue instead of running programs interactively.\nSoftware\nYou generally can’t install “the regular way”, and a lot of installed software needs to be “loaded” (as we’ll see today).\nOperating system\nSupercomputers run on the Linux operating system\n\n\n\n\n\n\n\n1.3 The Ohio Supercomputer Center (OSC)\nThe Ohio Supercomputer Center (OSC) is a facility provided by the state of Ohio in the US. It has two supercomputers, lots of storage space, and an excellent infrastructure for accessing these resources.\nOSC has three main websites — we will mostly or only use the first:\n\nhttps://ondemand.osc.edu: A web portal to use OSC resources through your browser (login needed).\nhttps://my.osc.edu: A site to manage your account and OSC Projects you are an admin for (login needed).\nhttps://osc.edu: General website with information about the supercomputers, installed software, and usage.\n\n\n\n\n\n\n\nOSC Projects\n\n\n\nAccess to OSC’s computing power and storage space goes through OSC “Projects”.\n\nA project can be tied to a research project or lab, or be educational like the project PAS2250 you have been added to.\nEach project has a budget in terms of “compute hours” and storage space.\nAs a user, it’s possible to be a member of multiple different projects."
  },
  {
    "objectID": "01_osc.html#the-structure-of-a-supercomputer-center",
    "href": "01_osc.html#the-structure-of-a-supercomputer-center",
    "title": "Intro to the Ohio Supercomputer Center (OSC)",
    "section": "2 The structure of a supercomputer center",
    "text": "2 The structure of a supercomputer center\n\n2.1 Terminology\nLet’s start with some terminology, going from smaller things to bigger things:\n\nCore / Processor / CPU / Thread\nComponents of a computer (node) that can each (semi-)indendepently be asked to perform a computing task like running a bioinformatics program. For our purposes, we can treat these terms as synonyms.\nNode\nA single computer that is a part of a supercomputer and has dozens of cores2.\nSupercomputer / Cluster\nA collection of computers connected by a high-speed network. OSC has two: “Pitzer” and “Owens”.\nSupercomputer Center\nA facility like OSC that has one or more supercomputers.\n\n\n\n\n\n\n2.2 Supercomputer components\nWe can think of a supercomputer as having three main parts:\n\nFile Systems: Where files are stored (these are shared between the two clusters!)\nLogin Nodes: The handful of computers everyone shares after logging in\nCompute Nodes: The many computers you can reserve to run your analyses\n\n\n\n\nLet’s take those in order.\n\n\nFile systems\nOSC has several distinct file systems — we will only see the following two:\n\n\n\n\n\n\n\n\n\n\n\nFile system\nLocated within\nQuota\nBacked up?\nAuto-purged?\nOne for each…\n\n\n\n\nHome\n/users/\n500 GB / 1 M files\nYes\nNo\nUser\n\n\nScratch\n/fs/scratch/\n100 TB\nNo\nAfter 90 days\nOSC Project\n\n\n\nIn today’s and tomorrow’s sessions, we will be working in the scratch directory of the OSC Project PAS2250: /fs/scratch/PAS22503.\n\n\n\n\n\n\nUnix terminology and environment variables\n\n\n\nWe’ll talk about all of this more in upcoming sessions, but to clarify some of the terms and concepts mentioned here:\n\n“Directory” (or “dir” for short) is a commonly used term in Unix that just means “folder”.\nIn the “Located within” column in the table above, the leading forward slash / signifies the system’s “root” (top-level) directory, and forward slashes are also used to separate directories (unlike in Windows, which uses backslashes).\n\n\n\n\n\n\n\n\n\nFile Systems are shared among the clusters\n\n\n\nWhile OSC’s current two clusters, Owens and Pitzer, are largely separate, they do share the same File System. This means that you can access your files in the exact same way regardless of which supercomputer you have connected to.\n\n\n\n\n\nLogin Nodes\nLogin nodes are set aside as an initial landing spot for everyone who logs in to a supercomputer. There are only a handful of them on each supercomputer, and they are shared among everyone and cannot be “reserved”.\nAs such, login nodes are meant only to do things like organizing your files and creating scripts for compute jobs, and are not meant for any serious computing, which should be done on the compute nodes.\n\n\n\nCompute Nodes\nData processing and analysis is done on compute nodes. You can only use compute nodes after putting in a request for resources (a “job”). A job scheduler4 will then assign resources to your request.\n\n\n\n\n\n\nInteractive and batch use of compute nodes\n\n\n\nRequests for compute node jobs can be made through the OnDemand website or with commands like srun and sbatch.\nJobs can either be interactive (like running Rstudio or interactive shell jobs) or be a “batch” job (sending a script away to be run on a compute node). Only with interactive jobs do you “move” to a compute node yourself.\n\n\nCompute nodes come in different shapes and sizes. You mostly don’t have to worry about this but sometimes non-standard nodes are need, such as when you need a lot of RAM memory or need GPUs5."
  },
  {
    "objectID": "01_osc.html#osc-ondemand",
    "href": "01_osc.html#osc-ondemand",
    "title": "Intro to the Ohio Supercomputer Center (OSC)",
    "section": "3 OSC OnDemand",
    "text": "3 OSC OnDemand\nThe OSC OnDemand web portal allows you to use a web browser to access OSC resources such as:\n\nA file browser where you can also create and rename folders and files, etc.\nA Unix shell\nA host of “Interactive Apps”: programs such as RStudio, Jupyter, VS Code and QGIS.\n\n Go to https://ondemand.osc.edu and log in (use the box on the left-hand side)\nYou should see a landing page similar to the one below:\n\n\n\nWe will now go through some of the dropdown menus in the blue bar along the top.\n\n\n3.1 Files: File system access\nHovering over the Files dropdown menu gives a list of directories that you have access to. If your account is brand new, and you were added to PAS2250, you should only have two directories listed6:\n\nA Home directory (starts with /users/)\nA project “scratch” directory (starts with /fs/scratch/) PAS2250\n\nSelect the PAS2250 scratch directory, /fs/scratch/PAS2250, where we’ll be working today and next week:\n\n\n\n\n\nOnce there, you should see a list of directories and files (here: just a single dir), and you can click on the directories to explore the contents further:\n\n\n\n\n\nThis interface is much like the file browser on your own computer, so you can also create, delete, move and copy files and folders, and even upload (from your computer to OSC) and download (from OSC your computer) files7 — see the buttons across the top. 8: Though this is not meant for large (&gt;1 GB) transfers. Different methods are available for those but are outside the scope of this introductions.\n\n Your Turn: Create your own folder\n\nClick your way into ENT6703 within /fs/scratch/PAS2250 if you’re not already there.\nYou should (at least) see directories/folders named share and jelmer.\nCreate your own folder by clicking the New Directory button at the top.\nPlease give it the exact same name as your OSC username (including any capitalization).\n\n(You can see what your username is by looking at the right side of the blue top bar:)\n\n\n\n\n\n\n\n\n\n3.2 Clusters: Unix shell access\n\n\n\n\n\n\nSide note: Clusters &gt; System Status\n\n\n\n\n\nMoving on to “Clusters”, we’ll start with the item at the bottom of that dropdown menu, “System Status”:\n\n\n\n\n\nThis page shows an overview of the current usage of the two clusters, which might help to decide which cluster you want to use and set some expectations for compute job waiting times:\n\n\n\n\n\n\n\n\nInteracting with a supercomputer is most commonly done using a Unix shell, and we’ll learn about the basics of doing so soon. Under the Clusters dropdown menu, you can access a Unix shell either on Owens or Pitzer:\n\n\n\n\n\nI’m selecting a shell on the Pitzer supercomputer, which will open a new browser tab looking like this:\n\n\n\n\n\nHowever, from now on, we’ll be accessing a Unix shell inside the VS Code text editor, which also gives us some additional functionality in a user-friendly way.\n\n\n\n3.3 Interactive Apps\nWe can access programs with Graphical User Interfaces (GUIs; point-and-click interfaces) via the Interactive Apps dropdown menu — let’s select VS Code using the “Code Server” button:\n\n\n\n\n\nBecause Interactive Apps like VS Code and RStudio run on compute nodes (not login nodes), which need to be “reserved”, we have to fill out a form and specify the following details (see also the screenshot below):\n\n\n\n\n\n\n\nOption\nValue\n\n\n\n\nThe OSC Project that should be billed for the compute resource usage\nPAS2250\n\n\nThe Number of hours we want to make a reservation for9\n10\n\n\nThe Working Directory10 for the program\nyour newly-created personal folder in /fs/scratch/PAS2250/cabana (e.g. /fs/scratch/PAS2250/cabana/jelmer)\n\n\nThe Codeserver Version\n4.8\n\n\n\n\n\n\n\n\nClick on Launch at the bottom, which will send your request to the “compute job” scheduler. First, your job will be “Queued” — that is, waiting for the job scheduler to allocate resources on the compute nodes to it:\n\n\n\n\n\nYour job is typically granted resources within a few seconds (the card will then say “Starting”), and be ready for usage (“Running”) in another couple of seconds:\n\n\n\n\n\nThen, click on the blue Connect to VS Code button to open VS Code in a new browser tab. When VS Code opens, you may get these two pop-ups — click “Yes” (and check the box) and “Don’t Show Again”, respectively:"
  },
  {
    "objectID": "01_osc.html#further-reading",
    "href": "01_osc.html#further-reading",
    "title": "Intro to the Ohio Supercomputer Center (OSC)",
    "section": "4 Further reading",
    "text": "4 Further reading\n\nOSC’s learning resources\n\nAn extended version of this introduction\nOSC’s online asynchronous courses\nOSC’s new User Resource Guide\n\n\n\n\nAcknowledgements\nThis page uses material from an OSC Introduction written by Mike Sovic and from OSC’s Kate Cahill Software Carpentry introduction to OSC."
  },
  {
    "objectID": "01_osc.html#footnotes",
    "href": "01_osc.html#footnotes",
    "title": "Intro to the Ohio Supercomputer Center (OSC)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCloud computing is an alternative, but won’t be covered here.↩︎\nI.e., these nodes tend to be more powerful than a personal laptop or desktop↩︎\nIf you’d be doing research on OSC, though, you would mostly interact with the Project directories: this is because for most files, you’ll want a permanent and backed-up location (i.e., not Scratch or Compute storage), and the Home directory offers relatively limited storage as well as challenges with file sharing.↩︎\nOSC uses the Slurm job scheduler↩︎\nGPUs are e.g. used for Nanopore basecalling↩︎\nIf you had been added to another project than PAS2250, you would have had at least 3: PAS2250 does not have a “project dir”, but most projects do↩︎\nCloud computing is an alternative, but won’t be covered here.↩︎\nCloud computing is an alternative, but won’t be covered here.↩︎\nNote that we’ll be kicked off as soon as that amount of time has passed!↩︎\nThis will be your starting location in the file system, we’ll talk more about working dirs in a little bit.↩︎"
  },
  {
    "objectID": "02_vscode.html#what-is-vs-code",
    "href": "02_vscode.html#what-is-vs-code",
    "title": "The VS Code text editor",
    "section": "1 What is VS Code?",
    "text": "1 What is VS Code?\nVS Code is basically a fancy text editor. Its full name is Visual Studio Code but at OSC it is also referred to as Code Server.\nTo emphasize the additional functionality relative to basic text editors like Notepad and TextEdit, editors like VS Code are also referred to as “IDEs”: Integrated Development Environments. The RStudio program is another good example of an IDE. For our purposes:\n\nVS code will be our IDE for Unix shell code\nRStudio will be our IDE for R"
  },
  {
    "objectID": "02_vscode.html#connecting-to-vs-code",
    "href": "02_vscode.html#connecting-to-vs-code",
    "title": "The VS Code text editor",
    "section": "2 Connecting to VS Code",
    "text": "2 Connecting to VS Code\nWe saw on the previous page (link) how to start a VS Code session at OSC, and you should have one active now.\n\n\n\n\n\n\nStarting VS Code at OSC - Instructions in brief (Click to expand)\n\n\n\n\n\n\nLog in to OSC’s OnDemand portal at https://ondemand.osc.edu.\nIn the blue top bar, select Interactive Apps and then near the bottom of the dropdown menu, click Code Server.\nIn the form that appears on a new page:\n\nSelect OSC project PAS2250\nThe starting directory: /fs/scratch/PAS2250/ENT6703/&lt;your_personal_dir&gt;\nNumber of hours: 10\nClick Launch.\n\nOn the next page, once the top bar of the box has turned green and says Runnning, click Connect to VS Code."
  },
  {
    "objectID": "02_vscode.html#the-vs-code-user-interface",
    "href": "02_vscode.html#the-vs-code-user-interface",
    "title": "The VS Code text editor",
    "section": "3 The VS Code User Interface",
    "text": "3 The VS Code User Interface\n\n\n\n\n\n\nSide bars\nThe Activity Bar (narrow side bar) on the far left has:\n\nA  (“hamburger menu”), which has menu items like File that you often find in a top bar.\nA  (cog wheel icon) in the bottom, through which you can mainly access settings.\nIcons to toggle (wide) Side Bar options — but we’ll only use the default selection, the Explorer (file browser)\n\n\n\nEditor pane and Welcome document\nThe main part of the VS Code is the editor pane. Here, we can open files like scripts and other types of text files, and images. (Whenever you open VS Code, an editor tab with a Welcome document is automatically opened. This provides some help and some shortcuts like to recently opened files and folders.)\n\n\nTerminal (with a Unix shell)\n Open a terminal by clicking      =&gt; Terminal =&gt; New Terminal.\n\n\n\n Your Turn: Try a few color themes\n\nAccess the “Color Themes” option by clicking  =&gt; Color Theme.\nTry out a few themes and see what you like!"
  },
  {
    "objectID": "02_vscode.html#a-folder-as-a-starting-point",
    "href": "02_vscode.html#a-folder-as-a-starting-point",
    "title": "The VS Code text editor",
    "section": "4 A folder as a starting point",
    "text": "4 A folder as a starting point\nConveniently, VS Code takes a specific folder (directory) as a starting point in all parts of the program:\n\nIn the file explorer in the side bar\nIn the terminal\nWhen saving files in the editor pane.\n\nYour should already be in the appropriate folder (/fs/scratch/PAS2250/cabana/&lt;user&gt;), but if you wanted to switch folder, you could click      =&gt;   File   =&gt;   Open Folder.\n\n\n\n\n\n\nSome VS Code tips and tricks\n\n\n\n\nResizing panes\nYou can resize panes (the terminal, editor, and side bar) by hovering your cursor over the borders and then dragging.\nThe Command Palette\nTo access all the menu options that are available in VS Code, the so-called “Command Palette” can be handy, especially if you know what you are looking for. To access the Command Palette, click      and then Command Palette (or press F1 or Ctrl/⌘+Shift+P).\nKeyboard shortcuts\nFor a single-page PDF overview of keyboard shortcuts for your operating system:      =&gt;   Help   =&gt;   Keyboard Shortcut Reference. (Or for direct links to these PDFs: Windows / Mac / Linux.) A couple of useful keyboard shortcuts are highlighted below.\n\n\n\n\n\n\n\n\n\nUseful keyboard shortcuts (Click to expand)\n\n\n\n\n\nWorking with keyboard shortcuts for common operations can be a lot faster than using your mouse. Below are some useful ones for VS Code (for Mac, in some case, you’ll have to replace Ctrl with ⌘):\n\nOpen a terminal: Ctrl+` (backtick) or Ctrl+Shift+C.\nToggle between the terminal and the editor pane: Ctrl+` and Ctrl+1.\nToggle the (wide) Side Bar: Ctrl+B\nLine actions:\n\nCtrl+X / C will cut/copy the entire line where the cursor is, when nothing is selected (!)\nCtrl+Shift+K will delete a line\nAlt+⬆/⬇ will move lines up or down.\n\nMultiple cursors: Press & hold Ctrl+Shift, then ⬆/⬇ arrows to add cursors upwards or downwards.\nToggle line comment (“comment out” code, and removing those comment signs): Ctrl+/\nSplit the editor window vertically: Ctrl+\\ (See also the options in      View =&gt; Editor Layout)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Feb ’24 CABANAnet/STC-CGIAR workshop",
    "section": "",
    "text": "Day\nTime\nInstructor\nTopic and link\n\n\n\n\nWed Feb 7th\n08:00-08:45\nJelmer\nIntro to supercomputing / OSC\n\n\n\n08:45-09:00\nJelmer\nVS Code\n\n\n\n09:00-09:50\nJelmer\nUnix shell refresher\n\n\n\n10:10-12:00\nJelmer\nFASTQ files and quality control\n\n\n\n13:00-16:30\nMyriam\nAmplicon sequencing to characterize P. infestans populations\n\n\nThu Feb 8th\n08:00-09:00\nJelmer\nIntro to bacterial genome analysis\n\n\n\n09:00-11:00\nJelmer\nScaling up with shell scripts, batch jobs and loops\n\n\n\n11:00-12:00\nJelmer\nIntro to the Bactopia workflow\n\n\n\n13:00-14:30\nJelmer\nRunning the Bactopia workflow\n\n\n\n14:50-16:30\nJelmer\nInterpreting the Bactopia results\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About this website",
    "section": "",
    "text": "This website contains the teaching materials of Jelmer Poelstra (MCIC Wooster, Ohio State University) and Myriam Izarra (CGIAR) in the CABANAnet/STC-CGIAR workshop Latin American workshop on high throughput sequencing for plant pathogen identification and analysis.\nThis workshop was held from Feb 5th to Feb 9th, 2024, in Chachapoyas, Peru.\nThe source code for this website can be found at https://github.com/jelmerp/cabana-workshop.\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "05_amplicon.html#data-secuenciada",
    "href": "05_amplicon.html#data-secuenciada",
    "title": "Amplicon sequencing for Phytophthora infestans populations",
    "section": "1 Data Secuenciada",
    "text": "1 Data Secuenciada\nListado de muestras (n=55) a analizar por alumno."
  },
  {
    "objectID": "05_amplicon.html#servidor",
    "href": "05_amplicon.html#servidor",
    "title": "Amplicon sequencing for Phytophthora infestans populations",
    "section": "2 Servidor",
    "text": "2 Servidor\n\n\n\n\n\nIngresar SupercomputerCenter. Ingresar su usuario y contraseña:\n\n\n\n\n\n\n2.1 Definiendo el directorio de trabajo\nEl primer paso es definir un directorio de trabajo. El directorio o carpeta de trabajo es aquel en que se va a buscar los archivos\n\n2.1.1 Dar click en Files y escoger /fs/scratch/PAS2250/mizarra\n\n\n2.1.2 Buscar su usuario y entrar al folder\n\n\n\n2.1.3 Abrir VS Code\n\nYou should already have a VS Code session, but if not, see the instructions below.\n\n\n\n\n\n\n\nStarting VS Code at OSC - Instructions in brief (Click to expand)\n\n\n\n\n\n\nLog in to OSC’s OnDemand portal at https://ondemand.osc.edu.\nIn the blue top bar, select Interactive Apps and then near the bottom of the dropdown menu, click Code Server.\nIn the form that appears on a new page:\n\nSelect OSC project PAS2250\nThe starting directory: /fs/scratch/PAS2250/ENT6703/&lt;your_personal_dir&gt;\nNumber of hours: 10\nClick Launch.\n\nOn the next page, once the top bar of the box has turned green and says Runnning, click Connect to VS Code.\n\n\n\n\n\nIngresar a su carpeta:\n\ncd /fs/scratch/PAS2250/cabana/$USER\n\n\n\n2.2 Archivos Ingresar a cada carpeta del usuario según sus apellidos\n\nReads:\n\nls ../mizarra/***usuario_nuevo***/reads\n\nContig de secuencia de referencia:\n\nls ../mizarra/***usuario_nuevo***/ref\n\n\n2.3 Copiar directorios (folders)\n\nPara copiar directorios (folders) a una nueva ubicación en Linux, puedes usar el comando cp (copy)\nVerificar que el nombre usuario_nuevo tenga el nombre de carpeta creada por ustedes en el OSC\nCrear carpeta llamada Phytophthora en su carpeta nueva\n\nmkdir Phytophthora\n\n2.3.1 Comando 1: Reads\ncp -r ../mizarra/***usuario_nuevo***/reads Phytophthora/reads\n\n\n2.3.2 Comando 2: Referencia\ncp -r ../mizarra/***usuario_nuevo***/ref Phytophthora/ref"
  },
  {
    "objectID": "05_amplicon.html#softwares-utilizados",
    "href": "05_amplicon.html#softwares-utilizados",
    "title": "Amplicon sequencing for Phytophthora infestans populations",
    "section": "3 Softwares utilizados",
    "text": "3 Softwares utilizados\n\nbwa: Mapeo de secuencias de ADN contra el genoma de referencia.\nsamtools: Para manipular alineaciones en formato SAM.\nbcftools: Para llamar variantes y manipular VCF y BCF."
  },
  {
    "objectID": "05_amplicon.html#script-a-ser-corrido",
    "href": "05_amplicon.html#script-a-ser-corrido",
    "title": "Amplicon sequencing for Phytophthora infestans populations",
    "section": "4 Script a ser corrido",
    "text": "4 Script a ser corrido\n\n4.1 Cargar los softwares\nmodule load miniconda3\nsource activate /fs/ess/PAS0471/jelmer/conda/cabana\n\n\n4.2 Ubicación en la carpeta de la referencia\ncd Phytophthora/ref\n\n4.2.1 BWA index para crear un índice para un genoma de referencia\nbwa index Pinf2021refs.fa\n\n\n4.2.2 Hacer un índice de archivo fasta del genoma de referencia\nsamtools faidx Pinf2021refs.fa\n\n\n\n4.3 Ubicación en la carpeta reads\ncd ../reads\n\n4.3.1 Alineamiento a la referencia\nfor file in *.fq.gz; do\n    bwa mem ../ref/Pinf2021refs.fa \"$file\" &gt; \"${file/%fq.gz/sam}\"\ndone\n\n\n4.3.2 Ordenar los alineamientos\nfor file in *.sam; do\n    samtools sort -o \"${file/%sam/sorted.sam}\" \"$file\"\ndone\n\n\n4.3.3 Convertir archivos SAM a BAM\nfor file in *sorted.sam; do\n    samtools view -bt ../ref/Pinf2021refs.fa.fai -o \"${file/%sorted.sam/bam}\" \"$file\"\ndone\n\n\n4.3.4 Remover archivos SAM\nrm *.sam\n\n\n4.3.5 Copiar los archivos bam (n=25) a una carpeta en común\ncp *.bam /fs/scratch/PAS2250/cabana/Phytophthora/reads\n\n\n4.3.6 Crear un listado de los archivos bam de todos los alumnos (n=25). Esperar que esten los 25 archivos bam.\n\nUbicarnos en la carpeta que tiene todos los archivos bam\n\nls /fs/scratch/PAS2250/cabana/Phytophthora/reads*.bam &gt; listbam\n\n\n4.3.7 Llamado de Variantes SNPs\n\nUbicarnos en la carpeta que contiene el archivolistbamgenerado\n\nbcftools mpileup -Ou -f ../ref/Pinf2021refs.fa -b listbam |\n    bcftools call -mv -o perupop.vcf\n\n\n4.3.8 Filtrar posiciones de SNP\nbcftools filter -Ov -o perupop_filtered.vcf -s LOWQUAL -e 'QUAL\\&lt;10 \\|\\| DP \\&lt;10' \\\n  --SnpGap 5 --set-GTs . perupop.vcf\n\n\n4.3.9 Mantener sólo los SNP con calidad chequeada\nbcftools view -f PASS perupop_filtered.vcf &gt; perupop_filtered_final.vcf"
  },
  {
    "objectID": "05_amplicon.html#rstudio",
    "href": "05_amplicon.html#rstudio",
    "title": "Amplicon sequencing for Phytophthora infestans populations",
    "section": "5 Rstudio",
    "text": "5 Rstudio\n\n5.1 Crear una carpeta llamada Rstudio\nmkdir /fs/scratch/PAS2250/cabana/$USER/Rstudio\n\n\n5.2 Copiar el archivo *.vcf\ncp perupop_filtered_final.vcf /fs/scratch/PAS2250/cabana/$USER/Rstudio\n\n\n5.3 Cargar Rstudio en el OSC OnDemand\nIngresar SupercomputerCenter\n\n5.3.1 Seleccionar Rstudio Server\n\n\n5.3.2 Iniciar Rstudio : cluster pitzer 5.3.3 “click en Launch” -setear número de horas\n\n\n5.3.3 Seleccionar el directorio de trabajo: /fs/scratch/PAS2250/cabana/$USER/Rstudio\n\n\n\n\n\n\n\n\n\n5.4 Cargar las librerias\n\n# Cargar modulos - &lt;https://www.osc.edu/resources/available_software/software_list/r#import_modules&gt;\nsource(file.path(Sys.getenv(\"LMOD_PKG\"), \"init/R\")) module(\"load\", \"gdal/3.3.1\") module(\"load\", \"proj/8.1.0\") module(\"load\", \"geos/3.9.1\") module(\"load\", \"sqlite/3.36.0\")\n\n# Cargar links de libreria dinamica dyn.load(\"/apps/proj/8.1.0/lib/libproj.so.22\", local=FALSE)\ndyn.load(\"/apps/gdal/3.3.1/lib/libgdal.so.29\", local=FALSE) dyn.load(\"/apps/geos/3.9.1/lib/libgeos_c.so\", local=FALSE)\n\n# Definir y configurar el directorio de la libreria\nlibdir &lt;- \"/fs/ess/PAS0471/jelmer/R/peru\"\n.libPaths(libdir)\n\nlibrary(vcfR)\nlibrary(poppr)\nlibrary(ape)\nlibrary(adegenet)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(ggplot2)\nlibrary(ggtree) \nlibrary(dartR)\nlibrary(directlabels)\nlibrary(viridisLite)\n\n\n# Cargar el archivo vcf generado con bcftools\nperupop.VCF &lt;- read.vcfR(\"perupop_filtered_final.vcf\")\n\n\n# Convertir el conjunto de datos en un objeto genlight\ngl.perupop &lt;- vcfR2genlight(perupop.VCF)\n\n\nploidy(gl.perupop) &lt;- 2\n\n\n# Renombrar las muestras\n#El archivo: new_names_peru.csv: Esta localizado aqui:\n#*/fs/scratch/PAS2250/cabana/Phytophthora/new_names_peru.csv*\ngl.perupop_recoded &lt;- gl.recode.ind(gl.perupop,\n                                    ind.recode=\"new_names_peru.csv\", \n                                    mono.rm = T, verbose=0)\n\ngl.perupop_recoded\n\n\n#Asignar el linaje clonal de las muestras en el orden delos genotipos reportados\n\npop(gl.perupop_recoded) &lt;- as.factor(c(\"US-1\",\n\"US-1\",\n\"PE-3\",\n\"PE-3\",\n\"PE-3\",\n\"EC-1\",\n\"EC-1\",\n\"EC-1\",\n\"EC-1\",\n\"PE-7\",\n\"PE-7\",\n\"US-1\",\n\"US-1\",\n\"US-1\",\n\"US-1\",\n\"US-1\",\n\"EC-1\",\n\"EC-1\",\n\"EC-1\",\n\"EC-1\",\n\"EC-1\",\n\"EC-1\",\n\"EC-1\",\n\"PE-3\",\n\"PE-7\",\n\"PE-7\",\n\"PE-7\",\n\"PE-7\",\n\"PE-7\",\n\"PE-7\",\n\"PE-3\",\n\"PE-3\",\n\"PE-3\",\n\"PE-3\",\n\"PE-3\",\n\"PE-3\",\n\"US-1\",\n\"US-1\",\n\"US-1\",\n\"US-1\",\n\"US-1\",\n\"US-1\",\n\"US-1\",\n\"PE-7-Puno\",\n\"PE-7-Puno\",\n\"PE-7-Puno\",\n\"PE-7-Puno\",\n\"PE-7-Puno\",\n\"PE-7-Puno\",\n\"PE-7-Puno\",\n\"PE-7-Puno\",\n\"PE-7-Puno\",\n\"PE-7-Puno\",\n\"PE-7-Puno\",\n\"PE-7-Puno\"))\n\n\n\n5.5 Dendograma basado en el algoritmo UPGMA\n\n#La función aboot se utiliza para evaluar la precisión del árbol de\n#decisión ajustado mediante la validación cruzada bootstrap.\n\ntree &lt;- aboot(gl.perupop_recoded, tree = \"upgma\", distance = bitwise.dist, \n              sample = 100, showtree = F, cutoff = 50, quiet = T)\n\ncols &lt;- turbo(n = nPop(gl.perupop_recoded))\nplot.phylo(tree, cex = 0.8, font = 2, adj = 0, tip.color =  cols[pop(gl.perupop_recoded)])\nnodelabels(tree$node.label, adj = c(1.3, -0.5), frame = \"n\", cex = 0.8,font = 3, xpd = TRUE)\nlegend('topleft', legend = c(\"EC-1\",\"PE-3\", \"PE-7\", \"PE-7-Puno\", \"US-1\"), fill = cols, \n       border = FALSE, bty = \"n\", cex = 0.55)\naxis(side = 1)\ntitle(xlab = \"Genetic distance (proportion of loci that are different)\")\n\ndev.off()\n\n\n# Guardar el Gráfico\npng(\"Tree_alldata.png\", res = 300, width = 9.57, height = 9.34, units = 'in')\nplot.phylo(tree, cex = 0.8, font = 2, adj = 0, tip.color =  cols[pop(gl.perupop_recoded)])\nnodelabels(tree$node.label, adj = c(1.3, -0.5), frame = \"n\", cex = 0.8,font = 3, xpd = TRUE)\nlegend('topleft', legend = c(\"EC-1\",\"PE-3\", \"PE-7\", \"PE-7-Puno\", \"US-1\"), fill = cols, \n       border = FALSE, bty = \"n\", cex = 0.55)\naxis(side = 1)\ntitle(xlab = \"Genetic distance (proportion of loci that are different)\")\n\ndev.off()\n\n\n# Reporte de la calidad de la data\ngl.report.callrate(gl.perupop_recoded, method =\"loc\")\n\ngl.report.callrate(gl.perupop_recoded, method =\"ind\")\n\n\n# Filtrar la data 0.8189447\ngl.perupop2 &lt;- gl.filter.callrate(gl.perupop_recoded,\n                                  method=\"ind\", \n                                  t=0.8189447,\n                                  recalc = T)\n\n\nnames(gl.perupop2) \ngl.perupop2$ind.names\ngl.perupop2$pop\n\n\npop(gl.perupop2) &lt;- as.factor(c(\"US-1\",\n\"US-1\",\n\"PE-3\",\n\"EC-1\",\n\"EC-1\",\n\"PE-7\",\n\"PE-7\",\n\"US-1\",\n\"US-1\",\n\"US-1\",\n\"US-1\",\n\"EC-1\",\n\"EC-1\",\n\"PE-3\",\n\"PE-7\",\n\"PE-7\",\n\"PE-7\",\n\"PE-7\",\n\"PE-7\",\n\"PE-7\",\n\"PE-3\",\n\"PE-3\",\n\"PE-3\",\n\"PE-3\",\n\"PE-3\",\n\"US-1\",\n\"US-1\",\n\"US-1\",\n\"US-1\",\n\"PE-7-Puno\",\n\"PE-7-Puno\",\n\"PE-7-Puno\",\n\"PE-7-Puno\"\n))\n\n\n# Árbol de distancia basado en el algoritmo UPGMA, con 100 replicados de bootstrap\ntree2 &lt;- aboot(gl.perupop2, tree = \"upgma\", distance = bitwise.dist, \n              sample = 100, showtree = F, cutoff = 50, quiet = T)\n\ncols &lt;- turbo(n = nPop(gl.perupop2))\nplot.phylo(tree2, cex = 0.8, font = 2, adj = 0, tip.color =  cols[pop(gl.perupop2)])\nnodelabels(tree2$node.label, adj = c(1.3, -0.5), frame = \"n\", cex = 0.8,font = 3, xpd = TRUE)\nlegend('topleft', legend = c(\"EC-1\",\"PE-3\", \"PE-7\", \"PE-7-Puno\", \"US-1\"), fill = cols, \n       border = FALSE, bty = \"n\", cex = 0.65)\naxis(side = 1)\ntitle(xlab = \"Genetic distance (proportion of loci that are different)\")\n\ndev.off()\n\n\n# Guardar el Gráfico\npng(\"Tree_filter0.8189447.png\", res = 300, width = 9.57, height = 9.34, units = 'in')\nplot.phylo(tree2, cex = 0.8, font = 2, adj = 0, tip.color =  cols[pop(gl.perupop2)])\nnodelabels(tree2$node.label, adj = c(1.3, -0.5), frame = \"n\", cex = 0.8,font = 3, xpd = TRUE)\nlegend('topleft', legend = c(\"EC-1\",\"PE-3\", \"PE-7\", \"PE-7-Puno\", \"US-1\"), fill = cols, \n       border = FALSE, bty = \"n\", cex = 0.65)\naxis(side = 1)\ntitle(xlab = \"Genetic distance (proportion of loci that are different)\")\n\ndev.off()\n\n\n\n5.6 Analisis de Coordenadas Principales (PCoA) usando la matriz de distancias\n\n# \nsubset_phytoph &lt;- gl.recalc.metrics(gl.perupop2)\nsubset_phytoph$other$loc.metrics &lt;- as.data.frame(subset_phytoph$other$loc.metrics)\n\n\npcoa &lt;- gl.pcoa(subset_phytoph, nfactors = 5)\n\n\ngl.pcoa.plot(pcoa, gl.perupop2)"
  }
]